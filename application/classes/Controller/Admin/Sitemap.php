<?php defined('SYSPATH') or die('No direct script access.');

class Controller_Admin_Sitemap extends Controller_Admin
{
  
    
    
	public function action_index()
	{
      define('SITEMAP_SITE_LINK',"http://trademag.com.ua");  
        
    //создаем основную структуру документа
            $base = '<?xml version="1.0" encoding="utf-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
    </urlset>';
    //для легкой работы с XML DOM используем стандартный класс SimpleXMLElement и для основы 
    //вставим подготовленный в переменной $base код
            $xmlbase = new SimpleXMLElement($base);
    //внутрь уже созданного документа добавляем дочерний элемент с тегом url
            $row  = $xmlbase->addChild("url");
    //добавляем в тег url тег ссылки, времени модификации, частоты модификации, приоритета
    //сперва для главной страницы
            $row->addChild("loc",SITEMAP_SITE_LINK);

                $row  = $xmlbase->addChild("url");
                $row->addChild("loc",SITEMAP_SITE_LINK."/articles/");
                $articles = ORM::factory('Article')->where('status','=',1)->find_all();
                foreach ($articles as $article) {
                        $row = $xmlbase->addChild("url");
                        $row->addChild("loc", SITEMAP_SITE_LINK . "/articles/".$article->path);
                }
                $row  = $xmlbase->addChild("url");
                $row->addChild("loc",SITEMAP_SITE_LINK."/page/delivery");
                $row  = $xmlbase->addChild("url");
                $row->addChild("loc",SITEMAP_SITE_LINK."/news/");
            $cats = ORM::factory('Category')->where('cat_id','>',1)->find_all();
            foreach ($cats as $result) {
                $row  = $xmlbase->addChild("url");
                $row->addChild("loc",SITEMAP_SITE_LINK."/cat/".$result->path);
                
                 // $row->addChild("lastmod",$result['created']);
               // $row->addChild("changefreq","monthly");
                //$row->addChild("priority","1");
            }
            $results = ORM::factory('Brand')
                ->where('status','=',1)
                ->find_all();
            foreach ($results as $result) {
                foreach($cats as $cat)
                {
                    if($cat->parent_id > 1) continue;
                    $catids = $this->get_where_cats($cat->path);
                   $count =  ORM::factory('Product')
                    ->where('status', '<>', 0)
                    ->and_where('cat_id','IN',$catids)
                    ->and_where('brand_id','=',$result->brand_id)
                    ->count_all();
                    if($count>0)
                    {
                        $row  = $xmlbase->addChild("url");
                        $row->addChild("loc",SITEMAP_SITE_LINK."/cat/".$cat->path."-".$result->path);
                    
                    $results2 = ORM::factory('Serie')->where('brand_id','=',$result->brand_id)->find_all();
                     foreach ($results2 as $rs) {
                         if( $rs->path ) {
                             $row = $xmlbase->addChild("url");
                             $row->addChild("loc", SITEMAP_SITE_LINK . "/cat/" . $cat->path . "-" . $result->path . '/series-' . $rs->path);
                         }
                     }
                    } 
                }
                
            }
            

            $results = ORM::factory('News')->find_all();
            foreach ($results as $result) {
                $row  = $xmlbase->addChild("url");
                $row->addChild("loc",SITEMAP_SITE_LINK."/news/".$result->path);
            }
        
            $results = ORM::factory('Product')->where('status','=',1)->find_all();
            foreach ($results as $result) {
                $row  = $xmlbase->addChild("url");
                $row->addChild("loc",SITEMAP_SITE_LINK."/product/".$result->path);
            }
    //сохраняем все это в файл
            $xmlbase->saveXML("sitemap_new.xml");
    }

    public function action_prods()
    {
      define('SITEMAP_SITE_LINK',"http://trademag.com.ua");  
        
    //создаем основную структуру документа
    $base = '<?xml version="1.0" encoding="utf-8"?><!--Generated by Screaming Frog SEO Spider 6.2-->
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
    </urlset>';
    //для легкой работы с XML DOM используем стандартный класс SimpleXMLElement и для основы 
    //вставим подготовленный в переменной $base код
            $xmlbase = new SimpleXMLElement($base);
    //внутрь уже созданного документа добавляем дочерний элемент с тегом url
            $row  = $xmlbase->addChild("url");
    //добавляем в тег url тег ссылки, времени модификации, частоты модификации, приоритета
    //сперва для главной страницы
            $row->addChild("loc",SITEMAP_SITE_LINK);
            $results = ORM::factory('Product')->where('status','=',1)->find_all();
            foreach ($results as $result) {
                $row  = $xmlbase->addChild("url");
                $row->addChild("loc",SITEMAP_SITE_LINK."/product/".$result->path);
            }
    //сохраняем все это в файл
            $xmlbase->saveXML("sitemap_only_prods.xml");
    }

    public function action_imagemap()
    {
        define('SITEMAP_SITE_LINK',"http://trademag.com.ua");

        //создаем основную структуру документа
        $base = '<?xml version="1.0" encoding="utf-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
  </urlset>';
        //для легкой работы с XML DOM используем стандартный класс SimpleXMLElement и для основы
        //вставим подготовленный в переменной $base код
        $xmlbase = new SimpleXMLElement($base);
        //внутрь уже созданного документа добавляем дочерний элемент с тегом url
        $urlimage='/public/uploads/imgproducts/';
        /*$prods = ORM::factory('Product')
            ->join('images','LEFT')
            ->on('product.prod_id','=','images.product_id')
            ->where('product.image_id','<>',0)
            ->find_all()->as_array();*/
        $q = 'SELECT * FROM `jk_products` as p left join `jk_images` as im on p.prod_id = im.product_id WHERE p.image_id <> 0';
        $qresult=DB::query(Database::SELECT,$q)->execute()->as_array();
        foreach ($qresult as $r)
        {
            $row  = $xmlbase->addChild("url");
            $row->addChild("loc",SITEMAP_SITE_LINK.'/product/' . $r['path']);
            $image = $row->addChild('image:image', null, 'http://www.google.com/schemas/sitemap-image/1.1');
            $image->addChild('image:loc',SITEMAP_SITE_LINK. $urlimage . $r['name']);
        }

       /* foreach ($prods as $p){
        $row  = $xmlbase->addChild("url");
        $loc = $row->addChild("loc",SITEMAP_SITE_LINK.'/product/' . $p->path);
        $image  = $loc->addChild("image:image");
        $image->addChild("image:loc",SITEMAP_SITE_LINK. $urlimage . $p->name);
        $image->addChild("image:title",$p->title);
        }*/
        $xmlbase->saveXML("sitemap_images_new.xml");
        /*$dom = new DomDocument();
        $dom->loadXML($xmlbase->asXML());
        $dom->formatOutput = true;


        $dom->saveXML("sitemap_images_new.xml");*/
    }

        protected function get_where_cats($catpath)
{
    $catids = array();
    $cats_chs = array();
    $cat = ORM::factory('Category')->where('path', '=', $catpath)->find();
    if(!$cat->loaded()){
        return null;
    }
    if($cat->has_children()) 
    {
        $cats_chs = $cat->children();
    
        if(count($cats_chs))
        {    
            $catids[] = $cat->cat_id;
            foreach($cats_chs as $c)
            {
                $catids[] = $c->cat_id; 
            }
            $this->catids = $catids;
            return $catids;
        }
    }
    else{
        $catids[] = $cat->cat_id;
        return $catids;
    }
    $this->catids = null;
    return null;
}	
       
}	